#!/usr/bin / env node

//post-OOP structure change, we had async list and add methods/commands. 
//Adding async search + delete + clear methods/commands, and regular methods for displaying count + total expenses, and auto schema setup

const PROCESS = require('process');
const READLINE = require('readline');
const { Client } = require('pg');

const HELP = `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`

// let args = PROCESS.argv;

// function displayHelp() {
//   console.log(HELP);
// };

function logAndExit(msg) {
  console.log(msg);
  process.exit() // process.exit(1)
}


class ExpenseData {
  constructor() {
    this.client = new Client({ database: 'expenses' });
  }

  async addExpense(cost, memo) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err))
    let date = new Date();
    date = date.toLocaleDateString();

    let text = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1,$2,$3)"
    let values = [cost, memo, date]
    await this.client.query(text, values)

    // let res = await this.client.query("SELECT * FROM expenses")

    await this.client.end().catch(err => logAndExit(err));
  }

  async listExpenses() {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err))

    let text = "SELECT * FROM expenses ORDER BY created_on ASC"

    let res = await this.client.query(text).catch(err => logAndExit(err));

    this.displayCount(res.rowCount)
    this.displayExpenses(res)
    this.displayTotal(res)

    await this.client.end().catch(err => logAndExit(err));
  }

  async searchExpenses(searchTerm) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err))

    let queryText = 'SELECT * FROM expenses WHERE memo ILIKE $1';

    let res = await this.client.query(queryText, [`%${searchTerm}%`]).catch(err => logAndExit(err));

    this.displayCount(res.rowCount)
    this.displayExpenses(res)
    this.displayTotal(searchTerm)

    await this.client.end().catch(err => logAndExit(err));
  }

  async deleteExpense(numDelete) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err))

    let queryText = 'SELECT * FROM expenses WHERE id = $1'
    let res = await this.client.query(queryText, [numDelete]).catch(err => logAndExit(err));

    if (res.rowCount === 1) {
      let queryText = 'DELETE FROM expenses WHERE id = $1'
      await this.client.query(queryText, [numDelete]).catch(err => logAndExit(err));
      console.log('The following expense has been deleted:');
      this.displayExpenses(res);
    } else {
      console.log(`There is no expense with the id '#${numDelete}'`);
    }

    await this.client.end().catch(err => logAndExit(err));
  }

  async clearExpenses() {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err))

    let queryText = 'DELETE FROM expenses'

    await this.client.query(queryText).catch(err => logAndExit(err));
    console.log('All expenses have been deleted');

    await this.client.end().catch(err => logAndExit(err));
  }

  async setupSchema() {
    let tableExistsQuery = `SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses'`;

    let tableCreationQuery = `CREATE TABLE expenses (
     id serial PRIMARY KEY,
     amount numeric(6,2) NOT NULL,
     memo text NOT NULL,
     created_on date NOT NULL
   )`;

    let res = await this.client.query(tableExistsQuery).catch(err => logAndExit(err));

    if (res.rows[0].count === '0') {
      await this.client.query(tableCreationQuery).catch(err => logAndExit(err));
    }
  }

  displayExpenses(resobj) {
    resobj.rows.forEach(tuple => {
      let columns = [
        `${tuple.id}`.padStart(3),
        tuple.created_on.toDateString().padStart(10),
        tuple.amount.padStart(12),
        tuple.memo
      ];
      console.log(columns.join(' | '));
    })
  }
  displayCount(rowsCount) {
    if (rowsCount === 0) {
      console.log('There are no expenses.')
    }
    else if (rowsCount === 1) {
      console.log('There is 1 expense.')
    } else {
      console.log(`There are ${rowsCount} expenses`)
    }
    ////LS solution:
    // //else {
    //   let verb = count > 1 ? 'are' : 'is';
    //   let countableNoun = count > 1 ? 'expenses' : 'expense';
    //   console.log(`There ${verb} ${count} ${countableNoun}.`);
    // }

  }
  displayTotal(expenses) {
    // let totalQuery = "SELECT sum(amount) FROM expenses WHERE memo ILIKE $1';"
    // let totalRes = await this.client.query(totalQuery, [`%${searchTerm}%`]).catch(err => logAndExit(err));
    let total = expenses.reduce((accumulator, row) => accumulator + Number(row.amount), 0);

    console.log('-'.repeat(50));
    console.log(`Total ${String(total).padStart(30)}`);

    // console.log('-------------------------------');
    // console.log(`Total ${' '.repeat(20)} ${totalRes.rows[0]}`)
  }



}




class CLI {
  constructor() {
    this.app = new ExpenseData()
  }
  static HELP() {
    return `An expense recording system

    Commands:
    
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field`
  }
  displayHelp() {
    console.log(CLI.HELP())
  }
  run(args) {
    let command = args[2];
    if (command === 'list') {
      this.app.listExpenses();
    } else if (command === 'add') {
      let amount = args[3];
      let memo = args[4];
      if (amount && memo) {
        this.app.addExpense(amount, memo);
      } else {
        console.log('You must provide an amount and memo.')
      }
    } else if (command === 'search') {
      let searchTerm = args[3];
      if (searchTerm) {
        this.app.searchExpenses(searchTerm)
      } else {
        console.log('You must provide a search term.')
      }
    } else if (command === 'delete') {
      let deleteId = args[3];
      if (deleteId) {
        this.app.deleteExpense(deleteId)
      } else {
        console.log('You must provide a search term.')
      }
    }
    else if (command === 'clear') {
      let rl = READLINE.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      let questionText = 'This will remove all expenses. Are you sure? (y/n) ';
      rl.question(questionText, (answer) => {
        if (answer === 'y') {
          this.application.clearExpenses();
        }
        rl.close();
      });
    }
    else {
      this.displayHelp();
    }
  }
}

let cli = new CLI()
cli.run(PROCESS.argv)
